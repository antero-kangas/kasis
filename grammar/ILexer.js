// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,20,159,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,0,5,0,56,
8,0,10,0,12,0,59,9,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,70,8,1,10,1,
12,1,73,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
1,7,1,8,1,8,1,9,4,9,94,8,9,11,9,12,9,95,1,10,1,10,1,10,3,10,101,8,10,3,10,
103,8,10,1,10,1,10,1,10,3,10,108,8,10,1,10,1,10,1,11,1,11,1,11,5,11,115,
8,11,10,11,12,11,118,9,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
5,23,144,8,23,10,23,12,23,147,9,23,1,23,1,23,1,24,1,24,5,24,153,8,24,10,
24,12,24,156,9,24,1,24,1,24,3,57,145,154,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,
7,15,0,17,0,19,0,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,
17,41,18,43,0,45,0,47,19,49,20,1,0,6,3,0,10,10,13,13,8232,8233,2,0,9,9,32,
32,2,0,65,90,97,122,1,0,48,57,2,0,69,69,101,101,1,0,34,34,164,0,1,1,0,0,
0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,65,1,0,0,0,5,76,1,0,0,0,7,80,1,
0,0,0,9,82,1,0,0,0,11,84,1,0,0,0,13,86,1,0,0,0,15,88,1,0,0,0,17,90,1,0,0,
0,19,93,1,0,0,0,21,97,1,0,0,0,23,111,1,0,0,0,25,119,1,0,0,0,27,121,1,0,0,
0,29,123,1,0,0,0,31,125,1,0,0,0,33,127,1,0,0,0,35,129,1,0,0,0,37,131,1,0,
0,0,39,133,1,0,0,0,41,135,1,0,0,0,43,137,1,0,0,0,45,139,1,0,0,0,47,141,1,
0,0,0,49,150,1,0,0,0,51,52,5,47,0,0,52,53,5,42,0,0,53,57,1,0,0,0,54,56,9,
0,0,0,55,54,1,0,0,0,56,59,1,0,0,0,57,58,1,0,0,0,57,55,1,0,0,0,58,60,1,0,
0,0,59,57,1,0,0,0,60,61,5,42,0,0,61,62,5,47,0,0,62,63,1,0,0,0,63,64,6,0,
0,0,64,2,1,0,0,0,65,66,5,47,0,0,66,67,5,47,0,0,67,71,1,0,0,0,68,70,8,0,0,
0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,
73,71,1,0,0,0,74,75,6,1,0,0,75,4,1,0,0,0,76,77,7,1,0,0,77,78,1,0,0,0,78,
79,6,2,0,0,79,6,1,0,0,0,80,81,5,35,0,0,81,8,1,0,0,0,82,83,5,59,0,0,83,10,
1,0,0,0,84,85,5,40,0,0,85,12,1,0,0,0,86,87,5,41,0,0,87,14,1,0,0,0,88,89,
7,2,0,0,89,16,1,0,0,0,90,91,7,3,0,0,91,18,1,0,0,0,92,94,3,17,8,0,93,92,1,
0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,20,1,0,0,0,97,102,3,19,
9,0,98,100,3,27,13,0,99,101,3,19,9,0,100,99,1,0,0,0,100,101,1,0,0,0,101,
103,1,0,0,0,102,98,1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,107,7,4,0,
0,105,108,3,31,15,0,106,108,3,33,16,0,107,105,1,0,0,0,107,106,1,0,0,0,107,
108,1,0,0,0,108,109,1,0,0,0,109,110,3,19,9,0,110,22,1,0,0,0,111,116,3,15,
7,0,112,115,3,15,7,0,113,115,3,17,8,0,114,112,1,0,0,0,114,113,1,0,0,0,115,
118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,24,1,0,0,0,118,116,1,0,0,
0,119,120,5,61,0,0,120,26,1,0,0,0,121,122,5,44,0,0,122,28,1,0,0,0,123,124,
5,58,0,0,124,30,1,0,0,0,125,126,5,43,0,0,126,32,1,0,0,0,127,128,5,45,0,0,
128,34,1,0,0,0,129,130,5,710,0,0,130,36,1,0,0,0,131,132,5,42,0,0,132,38,
1,0,0,0,133,134,5,47,0,0,134,40,1,0,0,0,135,136,5,37,0,0,136,42,1,0,0,0,
137,138,5,34,0,0,138,44,1,0,0,0,139,140,5,39,0,0,140,46,1,0,0,0,141,145,
3,43,21,0,142,144,8,5,0,0,143,142,1,0,0,0,144,147,1,0,0,0,145,146,1,0,0,
0,145,143,1,0,0,0,146,148,1,0,0,0,147,145,1,0,0,0,148,149,3,43,21,0,149,
48,1,0,0,0,150,154,3,45,22,0,151,153,5,39,0,0,152,151,1,0,0,0,153,156,1,
0,0,0,154,155,1,0,0,0,154,152,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,0,157,
158,3,45,22,0,158,50,1,0,0,0,11,0,57,71,95,100,102,107,114,116,145,154,1,
0,1,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ILexer extends antlr4.Lexer {

    static grammarFileName = "ILexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, "'#'", "';'", "'('", "')'", 
                         null, null, "'='", "','", "':'", "'+'", "'-'", 
                         "'\\u02C6'", "'*'", "'/'", "'%'" ];
	static symbolicNames = [ null, "MultiLineComment", "SingleLineComment", 
                          "WhiteSpace", "Dollar", "Semicolon", "LParen", 
                          "RParen", "Number", "Id", "Equal", "Comma", "Colon", 
                          "Plus", "Minus", "ToPower", "Times", "Div", "Mod", 
                          "DQString", "SQString" ];
	static ruleNames = [ "MultiLineComment", "SingleLineComment", "WhiteSpace", 
                      "Dollar", "Semicolon", "LParen", "RParen", "Letter", 
                      "Digit", "Int", "Number", "Id", "Equal", "Comma", 
                      "Colon", "Plus", "Minus", "ToPower", "Times", "Div", 
                      "Mod", "DQ", "SQ", "DQString", "SQString" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

ILexer.EOF = antlr4.Token.EOF;
ILexer.MultiLineComment = 1;
ILexer.SingleLineComment = 2;
ILexer.WhiteSpace = 3;
ILexer.Dollar = 4;
ILexer.Semicolon = 5;
ILexer.LParen = 6;
ILexer.RParen = 7;
ILexer.Number = 8;
ILexer.Id = 9;
ILexer.Equal = 10;
ILexer.Comma = 11;
ILexer.Colon = 12;
ILexer.Plus = 13;
ILexer.Minus = 14;
ILexer.ToPower = 15;
ILexer.Times = 16;
ILexer.Div = 17;
ILexer.Mod = 18;
ILexer.DQString = 19;
ILexer.SQString = 20;



