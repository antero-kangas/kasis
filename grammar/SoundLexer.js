// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,14,132,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,5,0,40,8,0,10,
0,12,0,43,9,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,54,8,1,10,1,12,1,57,
9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,3,3,66,8,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,
5,1,6,1,6,1,7,1,7,1,8,3,8,81,8,8,1,8,4,8,84,8,8,11,8,12,8,85,1,8,1,8,4,8,
90,8,8,11,8,12,8,91,3,8,94,8,8,1,9,1,9,5,9,98,8,9,10,9,12,9,101,9,9,1,10,
1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,5,14,113,8,14,10,14,12,14,116,
9,14,1,14,1,14,1,15,1,15,5,15,122,8,15,10,15,12,15,125,9,15,1,15,1,15,1,
16,1,16,3,16,131,8,16,1,41,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,0,17,8,
19,9,21,10,23,11,25,12,27,13,29,0,31,0,33,14,1,0,8,3,0,10,10,13,13,8232,
8233,2,0,9,9,32,32,1,0,48,57,2,0,43,43,45,45,7,0,65,90,95,95,97,122,196,
197,214,214,228,229,246,246,8,0,48,57,65,90,95,95,97,122,196,197,214,214,
228,229,246,246,1,0,34,34,1,0,39,39,139,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,17,1,0,0,0,0,19,
1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,33,1,0,0,0,
1,35,1,0,0,0,3,49,1,0,0,0,5,60,1,0,0,0,7,65,1,0,0,0,9,71,1,0,0,0,11,73,1,
0,0,0,13,75,1,0,0,0,15,77,1,0,0,0,17,80,1,0,0,0,19,95,1,0,0,0,21,102,1,0,
0,0,23,104,1,0,0,0,25,106,1,0,0,0,27,108,1,0,0,0,29,110,1,0,0,0,31,119,1,
0,0,0,33,130,1,0,0,0,35,36,5,47,0,0,36,37,5,42,0,0,37,41,1,0,0,0,38,40,9,
0,0,0,39,38,1,0,0,0,40,43,1,0,0,0,41,42,1,0,0,0,41,39,1,0,0,0,42,44,1,0,
0,0,43,41,1,0,0,0,44,45,5,42,0,0,45,46,5,47,0,0,46,47,1,0,0,0,47,48,6,0,
0,0,48,2,1,0,0,0,49,50,5,47,0,0,50,51,5,47,0,0,51,55,1,0,0,0,52,54,8,0,0,
0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,
57,55,1,0,0,0,58,59,6,1,0,0,59,4,1,0,0,0,60,61,7,1,0,0,61,62,1,0,0,0,62,
63,6,2,1,0,63,6,1,0,0,0,64,66,5,13,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,
1,0,0,0,67,68,5,10,0,0,68,69,1,0,0,0,69,70,6,3,1,0,70,8,1,0,0,0,71,72,5,
59,0,0,72,10,1,0,0,0,73,74,5,44,0,0,74,12,1,0,0,0,75,76,5,61,0,0,76,14,1,
0,0,0,77,78,7,2,0,0,78,16,1,0,0,0,79,81,7,3,0,0,80,79,1,0,0,0,80,81,1,0,
0,0,81,83,1,0,0,0,82,84,3,15,7,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,
0,85,86,1,0,0,0,86,93,1,0,0,0,87,89,5,46,0,0,88,90,3,15,7,0,89,88,1,0,0,
0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,87,1,0,0,0,
93,94,1,0,0,0,94,18,1,0,0,0,95,99,7,4,0,0,96,98,7,5,0,0,97,96,1,0,0,0,98,
101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,20,1,0,0,0,101,99,1,0,0,0,102,
103,5,40,0,0,103,22,1,0,0,0,104,105,5,41,0,0,105,24,1,0,0,0,106,107,5,91,
0,0,107,26,1,0,0,0,108,109,5,93,0,0,109,28,1,0,0,0,110,114,5,34,0,0,111,
113,8,6,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,
0,0,115,117,1,0,0,0,116,114,1,0,0,0,117,118,5,34,0,0,118,30,1,0,0,0,119,
123,5,39,0,0,120,122,8,7,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,
0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,5,39,0,0,127,
32,1,0,0,0,128,131,3,29,14,0,129,131,3,31,15,0,130,128,1,0,0,0,130,129,1,
0,0,0,131,34,1,0,0,0,12,0,41,55,65,80,85,91,93,99,114,123,130,2,0,1,0,6,
0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SoundLexer extends antlr4.Lexer {

    static grammarFileName = "SoundLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, null, "';'", "','", "'='", 
                         null, null, "'('", "')'", "'['", "']'" ];
	static symbolicNames = [ null, "MultiLineComment", "SingleLineComment", 
                          "WhiteSpace", "EOL", "Semicolon", "Comma", "Equal", 
                          "Number", "Id", "LParen", "RParen", "LBracket", 
                          "RBracket", "String" ];
	static ruleNames = [ "MultiLineComment", "SingleLineComment", "WhiteSpace", 
                      "EOL", "Semicolon", "Comma", "Equal", "Digit", "Number", 
                      "Id", "LParen", "RParen", "LBracket", "RBracket", 
                      "DQString", "SQString", "String" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

SoundLexer.EOF = antlr4.Token.EOF;
SoundLexer.MultiLineComment = 1;
SoundLexer.SingleLineComment = 2;
SoundLexer.WhiteSpace = 3;
SoundLexer.EOL = 4;
SoundLexer.Semicolon = 5;
SoundLexer.Comma = 6;
SoundLexer.Equal = 7;
SoundLexer.Number = 8;
SoundLexer.Id = 9;
SoundLexer.LParen = 10;
SoundLexer.RParen = 11;
SoundLexer.LBracket = 12;
SoundLexer.RBracket = 13;
SoundLexer.String = 14;



